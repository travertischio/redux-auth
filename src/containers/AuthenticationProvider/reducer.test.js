import { fromJS } from 'immutable';
import * as MockDate from 'mockdate';
import authenticationReducer from './reducer';
import {
  getInitialStateData,
  setAuthDataInStorage,
} from './utils';
import {
  clearTokenDataAction,
  clearUserDataAction,
  markAuthenticationProviderAsReadyAction,
  extendTokenLifetimeAction,
  setTokenDataAction,
  setUserDataAction,
} from './actions';
import {
  tokenData,
  userData,
} from '../../test.data';

describe('authenticationReducer', () => {
  let currentState;

  it('returns the initial state', () => {
    const expectedState = getInitialStateData();

    currentState = authenticationReducer(undefined, {});

    expect(currentState).toEqual(expectedState);
  });

  it('should return the same state when EXTEND_TOKEN_LIFETIME_ACTION occurs', () => {
    const action = extendTokenLifetimeAction();

    expect(currentState).toEqual(authenticationReducer(currentState, action));
  });

  it('should set isReady to true when MARK_AUTHENTICATION_PROVIDER_AS_READY_ACTION occurs', () => {
    const expectedState = currentState.set('isReady', true);
    const action = markAuthenticationProviderAsReadyAction();

    currentState = authenticationReducer(currentState, action);

    expect(currentState).toEqual(expectedState);
  });

  describe('when the token is saved in the local storage', () => {
    beforeEach(() => {
      setAuthDataInStorage({
        tokenData,
      });

      currentState = authenticationReducer(undefined, {});
    });

    it('should a initial state has tokenData', () => {
      currentState = authenticationReducer(undefined, {});
      const receivedTokenData = currentState.get('tokenData');

      expect(receivedTokenData.toJS()).toEqual(tokenData);
    });
  });

  describe('when SET_TOKEN_DATA_ACTION occurs', () => {
    beforeEach(() => {
      // const now = 1492090098140;

      // MockDate.set(now);

      const action = setTokenDataAction(tokenData);

      currentState = authenticationReducer(currentState, action);
    });

    it('should set tokenData', () => {
      const receivedTokenData = currentState.get('tokenData').toJS();

      expect(receivedTokenData).toEqual(tokenData);
    });

    it('should set isReady to true', () => {
      const receivedIsReady = currentState.get('isReady');

      expect(receivedIsReady).toBeTruthy();
    });

    describe('when SET_USER_DATA_ACTION occurs', () => {
      beforeEach(() => {
        // const now = 1492090098140;

        // MockDate.set(now);

        const action = setUserDataAction(userData);

        currentState = authenticationReducer(currentState, action);
      });

      it('should set userData', () => {
        const receivedUserData = currentState.get('userData').toJS();

        expect(receivedUserData).toEqual(userData);
      });

      describe('when CLEAR_TOKEN_DATA_ACTION occurs', () => {
        beforeEach(() => {
          const action = clearTokenDataAction();

          currentState = authenticationReducer(currentState, action);
        });

        // it('should set empty state data generated by getEmptyStateData', () => {
        //   let expectedState = getEmptyStateData();

        //   expectedState = expectedState.set('isReady', true);

        //   expect(currentState).toEqual(expectedState);
        // });

        // describe('when CLEAR_USER_DATA_ACTION occurs', () => {
        //   beforeEach(() => {
        //     const action = clearUserDataAction();

        //     currentState = authenticationReducer(currentState, action);
        //   });

        //   it('should set empty state data generated by getEmptyStateData', () => {
        //     const expectedState = getEmptyStateData();

        //     expect(currentState).toEqual(expectedState);
        //   });
        // });
      });

      // afterEach(() => {
      //   MockDate.reset();
      // });
    });
    // afterEach(() => {
    //   MockDate.reset();
    // });
  });
});
